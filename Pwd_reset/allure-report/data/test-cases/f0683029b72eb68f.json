{
  "uid" : "f0683029b72eb68f",
  "name" : "IDC修改sadmin密码成功！修改后密码：EISOO.COM123",
  "fullName" : "TestCase.test_reset_shidc#test_resetsh_operator_twice",
  "historyId" : "20bdb00ab80debc91cef71afac9ecb3c",
  "time" : {
    "start" : 1626764854465,
    "stop" : 1626764854663,
    "duration" : 198
  },
  "status" : "broken",
  "statusMessage" : "KeyError: \"name='userId', domain=None, path=None\"",
  "statusTrace" : "resetoperator = {'isEnc': 'true', 'oldUserPass': 'rLbS6j09h7zIrX9WU5DqnKtns56HvV+GNxXKMb4+GXbS6P/OTv+BAyS8SpMkqTtdhvxLnvH+2jabwq6naVFP...4b2o8OY7IP7xiJo96sIkmwVND1nvNSJre5x4M+ucAIaG3ZKFihNpmx+UkKn8r6Uidgz46PUuiOqYceGKoUSNavx4XEjNr3Pq+P1xQQKTvErtdr9vrRiI='}\nexpected = 'success'\n\n    @allure.title(\"IDC修改sadmin密码成功！修改后密码：EISOO.COM123\")\n    @pytest.mark.parametrize(\"resetoperator, expected\",\n                             [\n                                 ({\"isEnc\": \"true\",\n                                   \"oldUserPass\": \"rLbS6j09h7zIrX9WU5DqnKtns56HvV+GNxXKMb4+GXbS6P/OTv+BAyS8SpMkqTtdhvxLnvH+2jabwq6naVFP+7L9m5Ny0D8743SsQVKUYgnQq5cjUUqHlwgzbkWVZuMVaiDhen0BOFVQOpBxQGU2hOgq/hCNXbmXhecxh9fgruY=\",\n                                   \"repeatUserPass\": \"qH5DuXEgWFTKXofaeAygzigibB7ujOXbiotgvNvw9gy2ia3DIVBz/0e4b2o8OY7IP7xiJo96sIkmwVND1nvNSJre5x4M+ucAIaG3ZKFihNpmx+UkKn8r6Uidgz46PUuiOqYceGKoUSNavx4XEjNr3Pq+P1xQQKTvErtdr9vrRiI=\",\n                                   \"userPass\": \"qH5DuXEgWFTKXofaeAygzigibB7ujOXbiotgvNvw9gy2ia3DIVBz/0e4b2o8OY7IP7xiJo96sIkmwVND1nvNSJre5x4M+ucAIaG3ZKFihNpmx+UkKn8r6Uidgz46PUuiOqYceGKoUSNavx4XEjNr3Pq+P1xQQKTvErtdr9vrRiI=\"}, \"success\"),\n                             ])\n    def test_resetsh_operator_twice(resetoperator, expected):\n        file = open('D:\\workspace\\Pwd_reset\\TestData\\config.yaml')\n        res = yaml.load(file, Loader=yaml.FullLoader)\n    \n        # 获取临时cookies\n        url = parse.urljoin(res['shidc_base_url'], res['login_url'])\n        print(f'url:{url}')\n        header = res['shidc_login_headers']\n        print(f'header:{header}')\n        logininfo = {\"userName\": \"eisoo\",\n                     \"userPass\": \"rLbS6j09h7zIrX9WU5DqnKtns56HvV+GNxXKMb4+GXbS6P/OTv+BAyS8SpMkqTtdhvxLnvH+2jabwq6naVFP+7L9m5Ny0D8743SsQVKUYgnQq5cjUUqHlwgzbkWVZuMVaiDhen0BOFVQOpBxQGU2hOgq/hCNXbmXhecxh9fgruY=\",\n                     # eisoo.com123\n                     \"validPwdExpire\": \"true\",\n                     \"isEnc\": \"true\"}\n        shidc_login_response = requests.post(url, headers=header, json=logininfo, verify=False)\n        print(shidc_login_response)\n    \n        # 获取修改密码需要的参数：method、header、resetsadmin、cookie、url\n        method = res['reset_method']\n        cookie = shidc_login_response.cookies\n>       userId = shidc_login_response.cookies['userId']\n\nTestCase\\test_reset_shidc.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nc:\\users\\administrator\\appdata\\local\\programs\\python\\python38-32\\lib\\site-packages\\requests\\cookies.py:328: in __getitem__\n    return self._find_no_duplicates(name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <RequestsCookieJar[Cookie(version=0, name='csrftoken', value='vU0kDy3PeOmaOZXAyEeeFAlXbiQQf9K72vNMSlxII7HU98rU8ghvMK54...cified=True, secure=False, expires=1658214454, discard=False, comment=None, comment_url=None, rest={}, rfc2109=False)]>\nname = 'userId', domain = None, path = None\n\n    def _find_no_duplicates(self, name, domain=None, path=None):\n        \"\"\"Both ``__get_item__`` and ``get`` call this function: it's never\n        used elsewhere in Requests.\n    \n        :param name: a string containing name of cookie\n        :param domain: (optional) string containing domain of cookie\n        :param path: (optional) string containing path of cookie\n        :raises KeyError: if cookie is not found\n        :raises CookieConflictError: if there are multiple cookies\n            that match name and optionally domain and path\n        :return: cookie.value\n        \"\"\"\n        toReturn = None\n        for cookie in iter(self):\n            if cookie.name == name:\n                if domain is None or cookie.domain == domain:\n                    if path is None or cookie.path == path:\n                        if toReturn is not None:  # if there are multiple cookies that meet passed in criteria\n                            raise CookieConflictError('There are multiple cookies with name, %r' % (name))\n                        toReturn = cookie.value  # we will eventually return this as long as no cookie conflict\n    \n        if toReturn:\n            return toReturn\n>       raise KeyError('name=%r, domain=%r, path=%r' % (name, domain, path))\nE       KeyError: \"name='userId', domain=None, path=None\"\n\nc:\\users\\administrator\\appdata\\local\\programs\\python\\python38-32\\lib\\site-packages\\requests\\cookies.py:399: KeyError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "TestCase"
  }, {
    "name" : "suite",
    "value" : "test_reset_shidc"
  }, {
    "name" : "host",
    "value" : "WIN-JS0E4L8GKNT"
  }, {
    "name" : "thread",
    "value" : "3300-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "TestCase.test_reset_shidc"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "expected",
    "value" : "'success'"
  }, {
    "name" : "resetoperator",
    "value" : "{'isEnc': 'true', 'oldUserPass': 'rLbS6j09h7zIrX9WU5DqnKtns56HvV+GNxXKMb4+GXbS6P/OTv+BAyS8SpMkqTtdhvxLnvH+2jabwq6naVFP+7L9m5Ny0D8743SsQVKUYgnQq5cjUUqHlwgzbkWVZuMVaiDhen0BOFVQOpBxQGU2hOgq/hCNXbmXhecxh9fgruY=', 'repeatUserPass': 'qH5DuXEgWFTKXofaeAygzigibB7ujOXbiotgvNvw9gy2ia3DIVBz/0e4b2o8OY7IP7xiJo96sIkmwVND1nvNSJre5x4M+ucAIaG3ZKFihNpmx+UkKn8r6Uidgz46PUuiOqYceGKoUSNavx4XEjNr3Pq+P1xQQKTvErtdr9vrRiI=', 'userPass': 'qH5DuXEgWFTKXofaeAygzigibB7ujOXbiotgvNvw9gy2ia3DIVBz/0e4b2o8OY7IP7xiJo96sIkmwVND1nvNSJre5x4M+ucAIaG3ZKFihNpmx+UkKn8r6Uidgz46PUuiOqYceGKoUSNavx4XEjNr3Pq+P1xQQKTvErtdr9vrRiI='}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "f0683029b72eb68f.json",
  "parameterValues" : [ "'success'", "{'isEnc': 'true', 'oldUserPass': 'rLbS6j09h7zIrX9WU5DqnKtns56HvV+GNxXKMb4+GXbS6P/OTv+BAyS8SpMkqTtdhvxLnvH+2jabwq6naVFP+7L9m5Ny0D8743SsQVKUYgnQq5cjUUqHlwgzbkWVZuMVaiDhen0BOFVQOpBxQGU2hOgq/hCNXbmXhecxh9fgruY=', 'repeatUserPass': 'qH5DuXEgWFTKXofaeAygzigibB7ujOXbiotgvNvw9gy2ia3DIVBz/0e4b2o8OY7IP7xiJo96sIkmwVND1nvNSJre5x4M+ucAIaG3ZKFihNpmx+UkKn8r6Uidgz46PUuiOqYceGKoUSNavx4XEjNr3Pq+P1xQQKTvErtdr9vrRiI=', 'userPass': 'qH5DuXEgWFTKXofaeAygzigibB7ujOXbiotgvNvw9gy2ia3DIVBz/0e4b2o8OY7IP7xiJo96sIkmwVND1nvNSJre5x4M+ucAIaG3ZKFihNpmx+UkKn8r6Uidgz46PUuiOqYceGKoUSNavx4XEjNr3Pq+P1xQQKTvErtdr9vrRiI='}" ]
}